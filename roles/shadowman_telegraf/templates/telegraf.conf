# Telegraf Configuration
# Global tags can be specified here in key="value" format.
[global_tags]
# Configuration for telegraf agent
[agent]
  ## Default data collection interval for all inputs
  interval = "10s"
  ## Rounds collection interval to 'interval'
  round_interval = true

  ## Telegraf will send metrics to outputs in batches of at most
  metric_batch_size = 1000

  ## Maximum number of unwritten metrics per output.
  metric_buffer_limit = 10000

  ## Collection jitter is used to jitter the collection by a random amount.
  collection_jitter = "0s"

  ## Default flushing interval for all outputs. Maximum flush_interval will be
  flush_interval = "10s"
  ## Jitter the flush interval by a random amount.
  flush_jitter = "0s"

  ## Collected metrics are rounded to the precision specified
  precision = "0s"

  ## Override default hostname, if empty use os.Hostname()
  hostname = ""
  ## If set to true, do no set the "host" tag in the telegraf agent.
  omit_hostname = false

# Configuration for the Kafka server to send metrics to
[[outputs.kafka]]
  ## URLs of kafka brokers
  ## The brokers listed here are used to connect to collect metadata about a
  ## cluster. However, once the initial metadata collect is completed, telegraf
  ## will communicate solely with the kafka leader and not all defined brokers.
  brokers = ["{{ kafkaserver }}"]

  ## Kafka topic for producer messages
  topic = "network"

  ## Data format to output.
  data_format = "json"

###############################################################################
#                            SERVICE INPUT PLUGINS                            #
###############################################################################


# gNMI telemetry input plugin
[[inputs.gnmi]]
  ## Address and port of the gNMI servers
  addresses = [{{ gnmi_server }}]

  ## define credentials
  username = "{{ aristauser }}"
  password = "{{ aristapassword }}"

  ## gNMI encoding requested (one of: "proto", "json", "json_ietf", "bytes")
  encoding = "json"

  tls_enable = false

# Copy this section to create as many subscriptions as needed
  [[inputs.gnmi.subscription]]
    ## Name of the measurement that will be emitted
    name = "Interface State"

    origin = "openconfig"
    path = "/interfaces/interface/state/"

    ## Subscription mode ("target_defined", "sample", "on_change") and interval
    subscription_mode = "on_change"
    sample_interval = "2s"

    ## Suppress redundant transmissions when measured values are unchanged
    suppress_redundant = true

    ## If suppression is enabled, send updates at least every X seconds anyway
    heartbeat_interval = "120s"
